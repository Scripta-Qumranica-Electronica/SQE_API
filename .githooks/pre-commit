#!/bin/sh

# We check here that private settings have not accidentally been left in appsettings.json,
# or in docker-compose.yml.

check_docker_vars () {
    grep -n '\-[[:space:]]'"${1}"'=[^$]' docker/deploy/docker-compose.yml
    if test "$?" -eq 0; then 
        printf "\e[31mPlease remove the custom settings for ${1} from docker/deploy/docker-compose.yml\n"
        printf "The line should be:\n"
        printf "#- ${1}=\e[0m\n"
        exit 1
    fi
}

check_appsettings_vars () {
    grep -n '"'"${1}"'"[ ]*:[ ]*"[^"].*,.*$' sqe-api-server/appsettings.json 
    if test "$?" -eq 0; then 
        printf "\e[31mPlease remove the custom settings for ${1} from sqe-api-server/appsettings.json\n"
        printf "The line should be:\n"
        printf "\"${1}\": \"\",\e[0m\n"
        exit 1
    fi
    
    grep -n '"'"${1}"'"[ ]*:[ ]*"[^"].*,.*$' sqe-api-server/appsettings.Development.json 
    if test "$?" -eq 0; then 
        printf "\e[31mPlease remove the custom settings for ${1} from sqe-api-server/appsettings.Development.json\n"
        printf "The line should be:\n"
        printf "\"${1}\": \"\",\e[0m\n"
        exit 1
    fi
}

## Checking for custom settings in docker/deploy/docker-compose.yml
echo "Checking for private data in docker/deploy/docker-compose.yml"
check_docker_vars "MAILER_EMAIL_ADDRESS"
check_docker_vars "MAILER_EMAIL_USERNAME"
check_docker_vars "MAILER_EMAIL_PASSWORD"
check_docker_vars "MAILER_EMAIL_SMTP_URL"
check_docker_vars "MAILER_EMAIL_SMTP_PORT"
check_docker_vars "WEBSITE_HOST"

## Checking for custom settings in sqe-api-server/appsettings.json
echo "Checking for private data in sqe-api-server/appsettings.json"
check_appsettings_vars "MailerEmailAddress"
check_appsettings_vars "MailerEmailUsername"
check_appsettings_vars "MailerEmailPassword"
check_appsettings_vars "MailerEmailSmtpUrl"
check_appsettings_vars "MailerEmailSmtpPort"

## We generate the ts definitions for the C# DTOs before pushing
generate_realtime_hubs () {
    dotnet build sqe-realtime-hub-builder
    dotnet sqe-realtime-hub-builder/bin/Debug/netcoreapp3.1/sqe-realtime-hub-builder.dll
        if test "$?" -ne 0; then 
        printf "\e[31mThere was an error generating the SQE typescript DTO definitions.\n"
        printf "Please fix these errors before continuing to commit your changes.\e[0m\n"
        exit 1
    fi 
}

## Generating realtime hub methods
echo "Generating the realtime hub methods"
generate_realtime_hubs

## We run the "linter" to ensure the code remains formatted consistently
cleanup_code () {
    ## Check that dotnet-format is installed
    if ! dotnet tool list -g | grep "dotnet-format"; then
        dotnet tool install -g dotnet-format
    fi
    
    ~/.dotnet/tools/dotnet-format 
}

## Cleaning up code formatting
echo "Cleaning up code formatting"
cleanup_code

## We generate the ts definitions for the C# DTOs before pushing
generate_ts_from_dtos () {
    dotnet build Utilities/GenerateTypescriptDTOs
    dotnet build sqe-dto
    dotnet Utilities/GenerateTypescriptDTOs/bin/Debug/netcoreapp3.1/GenerateTypescriptDTOs.dll sqe-dto/bin/Debug/netcoreapp3.1/sqe-dto.dll ts-dtos/sqe-dtos.ts
    if test "$?" -ne 0; then 
        printf "\e[31mThere was an error generating the SQE typescript DTO definitions.\n"
        printf "Please fix these errors before continuing to commit your changes.\e[0m\n"
        exit 1
    fi 
}

## Generating typescript definitions
echo "Generating typescript dto definitions"
generate_ts_from_dtos

## We generate the ts signals interface for the C# signal methods before pushing
generate_ts_interfaces () {
    dotnet build Utilities/GenerateTypescriptInterfaces
    dotnet Utilities/GenerateTypescriptInterfaces/bin/Debug/netcoreapp3.1/GenerateTypescriptInterfaces.dll
    if test "$?" -ne 0; then 
        printf "\e[31mThere was an error generating the SQE typescript SignalR interface.\n"
        printf "Please fix these errors before continuing to commit your changes.\e[0m\n"
        exit 1
    fi 
}

## Generating typescript definitions
echo "Generating typescript SignalR interface"
generate_ts_interfaces

## Now add any updated files
git add -A

if test "$?" -eq 0; then 
    printf "\e[32mAll files have been succesfully checked.\e[0m\n\n"
    exit 0
else
    printf "\e[31mAn error occured adding the files for commit.\e[0m\n\n"
    exit 1
fi