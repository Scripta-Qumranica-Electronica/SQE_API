/*
 * Do not edit this file directly!
 * This SignalRSQE class is autogenerated by the `GenerateTypescriptInterfaces` 
 * in the project https://github.com/Scripta-Qumranica-Electronica/SQE_API.
 * Changes made there are used to automatically create this file at {ROOT}/ts-dtos
 * whenever the GenerateTypescriptInterfaces program is run.
 */

import { 
	ArtefactDataDTO,
	ArtefactDTO,
	ArtefactListDTO,
	ArtefactDataListDTO,
	UpdateArtefactDTO,
	CreateArtefactDTO,
	EditionDTO,
	EditionGroupDTO,
	EditionListDTO,
	PermissionDTO,
	UpdateEditorRightsDTO,
	CreateEditorRightsDTO,
	TextEditionDTO,
	ShareDTO,
	DeleteTokenDTO,
	DeleteEditionEntityDTO,
	EditionUpdateRequestDTO,
	EditionCopyDTO,
	ImageDTO,
	ImageInstitutionDTO,
	ImageInstitutionListDTO,
	ImageStackDTO,
	ImagedObjectDTO,
	ImagedObjectListDTO,
	PolygonDTO,
	SetInterpretationRoiDTO,
	InterpretationRoiDTO,
	UpdatedInterpretationRoiDTO,
	SetInterpretationRoiDTOList,
	InterpretationRoiDTOList,
	UpdatedInterpretationRoiDTOList,
	BatchEditRoiDTO,
	BatchEditRoiResponseDTO,
	SignDTO,
	NextSignInterpretationDTO,
	SignInterpretationDTO,
	InterpretationAttributeDTO,
	TextFragmentDataDTO,
	ArtefactTextFragmentMatchDTO,
	TextFragmentDataListDTO,
	ArtefactTextFragmentMatchListDTO,
	TextFragmentDTO,
	LineDataDTO,
	LineDataListDTO,
	LineDTO,
	LineTextDTO,
	UpdateTextFragmentDTO,
	CreateTextFragmentDTO,
	TransformationDTO,
	TranslateDTO,
	LoginRequestDTO,
	UserUpdateRequestDTO,
	NewUserRequestDTO,
	AccountActivationRequestDTO,
	ResendUserAccountActivationRequestDTO,
	UnactivatedEmailUpdateRequestDTO,
	ResetUserPasswordRequestDTO,
	ResetForgottenUserPasswordRequestDTO,
	ResetLoggedInUserPasswordRequestDTO,
	UserDTO,
	DetailedUserDTO,
	DetailedUserTokenDTO,
	EditorDTO,
	ArtefactSide,
} from "@/dtos/sqe-dtos"

import { HubConnectionBuilder, LogLevel, HubConnection } from '@microsoft/signalr'; 

export class SignalRSQE {  
    private _connection?: HubConnection;
    private _onConnectionClosed = (error?: Error) => { 
        console.debug(`Closed connection.`);
        if (error)
            throw error;
    };

    public async start(url: string, logging: LogLevel, token: string | null) {
        if (this._connection) {
            this._connection.stop();
        }

        this._connection = new HubConnectionBuilder()
            .withUrl(url, {
                accessTokenFactory: () => token || ''
            }).configureLogging(logging)
            .build();

        try {
            await this._connection.start();
            this._connection!.onclose(this._onConnectionClosed);
        } catch (error) {
            throw error;
        }
    }

    public async stop() {
        if (this._connection) {
            await this._connection!.stop();
        }
    }

    public setOnConnectionClosed(func: (error?: Error) => void): void {
        this._onConnectionClosed = func;
        if (this._connection) {
            this._connection!.onclose(this._onConnectionClosed);
        }
    }

    /*
     * Server methods.
     */

    public async postV1EditionsEditionIdEditors(editionId: number, payload: CreateEditorRightsDTO): Promise<CreateEditorRightsDTO> {
        return await this._connection!.invoke('PostV1EditionsEditionIdEditors', editionId, payload);
    }

    public async putV1EditionsEditionIdEditorsEditorEmailId(editionId: number, editorEmailId: string, payload: UpdateEditorRightsDTO): Promise<CreateEditorRightsDTO> {
        return await this._connection!.invoke('PutV1EditionsEditionIdEditorsEditorEmailId', editionId, editorEmailId, payload);
    }

    public async postV1EditionsEditionId(editionId: number, request: EditionCopyDTO): Promise<EditionDTO> {
        return await this._connection!.invoke('PostV1EditionsEditionId', editionId, request);
    }

    public async deleteV1EditionsEditionId(editionId: number, optional: string[], token: string): Promise<DeleteTokenDTO> {
        return await this._connection!.invoke('DeleteV1EditionsEditionId', editionId, optional, token);
    }

    public async getV1EditionsEditionId(editionId: number): Promise<EditionGroupDTO> {
        return await this._connection!.invoke('GetV1EditionsEditionId', editionId);
    }

    public async getV1Editions(): Promise<EditionListDTO> {
        return await this._connection!.invoke('GetV1Editions');
    }

    public async putV1EditionsEditionId(editionId: number, request: EditionUpdateRequestDTO): Promise<EditionDTO> {
        return await this._connection!.invoke('PutV1EditionsEditionId', editionId, request);
    }

    public async postV1UsersLogin(payload: LoginRequestDTO): Promise<DetailedUserTokenDTO> {
        return await this._connection!.invoke('PostV1UsersLogin', payload);
    }

    public async postV1UsersChangeUnactivatedEmail(payload: UnactivatedEmailUpdateRequestDTO): Promise<void> {
        return await this._connection!.invoke('PostV1UsersChangeUnactivatedEmail', payload);
    }

    public async postV1UsersChangeForgottenPassword(payload: ResetForgottenUserPasswordRequestDTO): Promise<void> {
        return await this._connection!.invoke('PostV1UsersChangeForgottenPassword', payload);
    }

    public async postV1UsersChangePassword(payload: ResetLoggedInUserPasswordRequestDTO): Promise<void> {
        return await this._connection!.invoke('PostV1UsersChangePassword', payload);
    }

    public async putV1Users(payload: UserUpdateRequestDTO): Promise<DetailedUserDTO> {
        return await this._connection!.invoke('PutV1Users', payload);
    }

    public async postV1UsersConfirmRegistration(payload: AccountActivationRequestDTO): Promise<void> {
        return await this._connection!.invoke('PostV1UsersConfirmRegistration', payload);
    }

    public async postV1UsersForgotPassword(payload: ResetUserPasswordRequestDTO): Promise<void> {
        return await this._connection!.invoke('PostV1UsersForgotPassword', payload);
    }

    public async getV1Users(): Promise<UserDTO> {
        return await this._connection!.invoke('GetV1Users');
    }

    public async postV1Users(payload: NewUserRequestDTO): Promise<UserDTO> {
        return await this._connection!.invoke('PostV1Users', payload);
    }

    public async postV1UsersResendActivationEmail(payload: ResendUserAccountActivationRequestDTO): Promise<void> {
        return await this._connection!.invoke('PostV1UsersResendActivationEmail', payload);
    }

    public async postV1EditionsEditionIdTextFragments(editionId: number, createFragment: CreateTextFragmentDTO): Promise<TextFragmentDataDTO> {
        return await this._connection!.invoke('PostV1EditionsEditionIdTextFragments', editionId, createFragment);
    }

    public async putV1EditionsEditionIdTextFragmentsTextFragmentId(editionId: number, textFragmentId: number, updatedTextFragment: UpdateTextFragmentDTO): Promise<TextFragmentDataDTO> {
        return await this._connection!.invoke('PutV1EditionsEditionIdTextFragmentsTextFragmentId', editionId, textFragmentId, updatedTextFragment);
    }

    public async getV1EditionsEditionIdTextFragments(editionId: number): Promise<TextFragmentDataListDTO> {
        return await this._connection!.invoke('GetV1EditionsEditionIdTextFragments', editionId);
    }

    public async getV1EditionsEditionIdTextFragmentsTextFragmentIdArtefacts(editionId: number, textFragmentId: number): Promise<ArtefactDataListDTO> {
        return await this._connection!.invoke('GetV1EditionsEditionIdTextFragmentsTextFragmentIdArtefacts', editionId, textFragmentId);
    }

    public async getV1EditionsEditionIdTextFragmentsTextFragmentIdLines(editionId: number, textFragmentId: number): Promise<LineDataListDTO> {
        return await this._connection!.invoke('GetV1EditionsEditionIdTextFragmentsTextFragmentIdLines', editionId, textFragmentId);
    }

    public async getV1EditionsEditionIdTextFragmentsTextFragmentId(editionId: number, textFragmentId: number): Promise<TextEditionDTO> {
        return await this._connection!.invoke('GetV1EditionsEditionIdTextFragmentsTextFragmentId', editionId, textFragmentId);
    }

    public async getV1EditionsEditionIdLinesLineId(editionId: number, lineId: number): Promise<LineTextDTO> {
        return await this._connection!.invoke('GetV1EditionsEditionIdLinesLineId', editionId, lineId);
    }

    public async subscribeToEdition(editionId: number): Promise<void> {
        return await this._connection!.invoke('SubscribeToEdition', editionId);
    }

    public async unsubscribeToEdition(editionId: number): Promise<void> {
        return await this._connection!.invoke('UnsubscribeToEdition', editionId);
    }

    public async listEditionSubscriptions(): Promise<number[]> {
        return await this._connection!.invoke('ListEditionSubscriptions');
    }

    public async getV1EditionsEditionIdImagedObjectsImagedObjectId(editionId: number, imagedObjectId: string, optional: string[]): Promise<ImagedObjectDTO> {
        return await this._connection!.invoke('GetV1EditionsEditionIdImagedObjectsImagedObjectId', editionId, imagedObjectId, optional);
    }

    public async getV1EditionsEditionIdImagedObjects(editionId: number, optional: string[]): Promise<ImagedObjectListDTO> {
        return await this._connection!.invoke('GetV1EditionsEditionIdImagedObjects', editionId, optional);
    }

    public async getV1ImagedObjectsInstitutions(): Promise<ImageInstitutionListDTO> {
        return await this._connection!.invoke('GetV1ImagedObjectsInstitutions');
    }

    public async getV1EditionsEditionIdRoisRoiId(editionId: number, roiId: number): Promise<InterpretationRoiDTO> {
        return await this._connection!.invoke('GetV1EditionsEditionIdRoisRoiId', editionId, roiId);
    }

    public async postV1EditionsEditionIdRois(editionId: number, newRoi: SetInterpretationRoiDTO): Promise<InterpretationRoiDTO> {
        return await this._connection!.invoke('PostV1EditionsEditionIdRois', editionId, newRoi);
    }

    public async postV1EditionsEditionIdRoisBatch(editionId: number, newRois: SetInterpretationRoiDTOList): Promise<InterpretationRoiDTOList> {
        return await this._connection!.invoke('PostV1EditionsEditionIdRoisBatch', editionId, newRois);
    }

    public async postV1EditionsEditionIdRoisBatchEdit(editionId: number, rois: BatchEditRoiDTO): Promise<BatchEditRoiResponseDTO> {
        return await this._connection!.invoke('PostV1EditionsEditionIdRoisBatchEdit', editionId, rois);
    }

    public async putV1EditionsEditionIdRoisRoiId(editionId: number, roiId: number, updateRoi: SetInterpretationRoiDTO): Promise<UpdatedInterpretationRoiDTO> {
        return await this._connection!.invoke('PutV1EditionsEditionIdRoisRoiId', editionId, roiId, updateRoi);
    }

    public async putV1EditionsEditionIdRoisBatch(editionId: number, updateRois: InterpretationRoiDTOList): Promise<UpdatedInterpretationRoiDTOList> {
        return await this._connection!.invoke('PutV1EditionsEditionIdRoisBatch', editionId, updateRois);
    }

    public async deleteV1EditionsEditionIdRoisRoiId(editionId: number, roiId: number): Promise<void> {
        return await this._connection!.invoke('DeleteV1EditionsEditionIdRoisRoiId', editionId, roiId);
    }

    public async postV1EditionsEditionIdArtefacts(editionId: number, payload: CreateArtefactDTO): Promise<ArtefactDTO> {
        return await this._connection!.invoke('PostV1EditionsEditionIdArtefacts', editionId, payload);
    }

    public async deleteV1EditionsEditionIdArtefactsArtefactId(editionId: number, artefactId: number): Promise<void> {
        return await this._connection!.invoke('DeleteV1EditionsEditionIdArtefactsArtefactId', editionId, artefactId);
    }

    public async getV1EditionsEditionIdArtefactsArtefactId(editionId: number, artefactId: number, optional: string[]): Promise<ArtefactDTO> {
        return await this._connection!.invoke('GetV1EditionsEditionIdArtefactsArtefactId', editionId, artefactId, optional);
    }

    public async getV1EditionsEditionIdArtefactsArtefactIdRois(editionId: number, artefactId: number): Promise<InterpretationRoiDTOList> {
        return await this._connection!.invoke('GetV1EditionsEditionIdArtefactsArtefactIdRois', editionId, artefactId);
    }

    public async getV1EditionsEditionIdArtefacts(editionId: number, optional: string[]): Promise<ArtefactListDTO> {
        return await this._connection!.invoke('GetV1EditionsEditionIdArtefacts', editionId, optional);
    }

    public async getV1EditionsEditionIdArtefactsArtefactIdTextFragments(editionId: number, artefactId: number, optional: string[]): Promise<ArtefactTextFragmentMatchListDTO> {
        return await this._connection!.invoke('GetV1EditionsEditionIdArtefactsArtefactIdTextFragments', editionId, artefactId, optional);
    }

    public async putV1EditionsEditionIdArtefactsArtefactId(editionId: number, artefactId: number, payload: UpdateArtefactDTO): Promise<ArtefactDTO> {
        return await this._connection!.invoke('PutV1EditionsEditionIdArtefactsArtefactId', editionId, artefactId, payload);
    }

    /*
     * Client methods.
     */

    public onCreatedTextFragment(func: (returnedData: TextFragmentDataDTO) => void): void {
        this._connection!.on('CreatedTextFragment', func)
    }

    public offCreatedTextFragment(func: (returnedData: TextFragmentDataDTO) => void): void {
        this._connection!.off('CreatedTextFragment', func)
    }


    public onUpdateTextFragment(func: (returnedData: TextFragmentDataDTO) => void): void {
        this._connection!.on('UpdateTextFragment', func)
    }

    public offUpdateTextFragment(func: (returnedData: TextFragmentDataDTO) => void): void {
        this._connection!.off('UpdateTextFragment', func)
    }


    public onCreatedEditor(func: (returnedData: CreateEditorRightsDTO) => void): void {
        this._connection!.on('CreatedEditor', func)
    }

    public offCreatedEditor(func: (returnedData: CreateEditorRightsDTO) => void): void {
        this._connection!.off('CreatedEditor', func)
    }


    public onUpdatedEditorEmail(func: (returnedData: CreateEditorRightsDTO) => void): void {
        this._connection!.on('UpdatedEditorEmail', func)
    }

    public offUpdatedEditorEmail(func: (returnedData: CreateEditorRightsDTO) => void): void {
        this._connection!.off('UpdatedEditorEmail', func)
    }


    public onCreateEditionId(func: (returnedData: EditionDTO) => void): void {
        this._connection!.on('CreateEditionId', func)
    }

    public offCreateEditionId(func: (returnedData: EditionDTO) => void): void {
        this._connection!.off('CreateEditionId', func)
    }


    public onDeletedEdition(func: (returnedData: DeleteTokenDTO) => void): void {
        this._connection!.on('DeletedEdition', func)
    }

    public offDeletedEdition(func: (returnedData: DeleteTokenDTO) => void): void {
        this._connection!.off('DeletedEdition', func)
    }


    public onUpdatedEdition(func: (returnedData: EditionDTO) => void): void {
        this._connection!.on('UpdatedEdition', func)
    }

    public offUpdatedEdition(func: (returnedData: EditionDTO) => void): void {
        this._connection!.off('UpdatedEdition', func)
    }


    public onCreatedLogin(func: (returnedData: DetailedUserTokenDTO) => void): void {
        this._connection!.on('CreatedLogin', func)
    }

    public offCreatedLogin(func: (returnedData: DetailedUserTokenDTO) => void): void {
        this._connection!.off('CreatedLogin', func)
    }


    public onCreatedUser(func: (returnedData: UserDTO) => void): void {
        this._connection!.on('CreatedUser', func)
    }

    public offCreatedUser(func: (returnedData: UserDTO) => void): void {
        this._connection!.off('CreatedUser', func)
    }


    public onCreatedRoi(func: (returnedData: InterpretationRoiDTO) => void): void {
        this._connection!.on('CreatedRoi', func)
    }

    public offCreatedRoi(func: (returnedData: InterpretationRoiDTO) => void): void {
        this._connection!.off('CreatedRoi', func)
    }


    public onCreatedRoisBatch(func: (returnedData: InterpretationRoiDTOList) => void): void {
        this._connection!.on('CreatedRoisBatch', func)
    }

    public offCreatedRoisBatch(func: (returnedData: InterpretationRoiDTOList) => void): void {
        this._connection!.off('CreatedRoisBatch', func)
    }


    public onCreatedRoisBatchEdit(func: (returnedData: BatchEditRoiResponseDTO) => void): void {
        this._connection!.on('CreatedRoisBatchEdit', func)
    }

    public offCreatedRoisBatchEdit(func: (returnedData: BatchEditRoiResponseDTO) => void): void {
        this._connection!.off('CreatedRoisBatchEdit', func)
    }


    public onUpdatedRoi(func: (returnedData: UpdatedInterpretationRoiDTO) => void): void {
        this._connection!.on('UpdatedRoi', func)
    }

    public offUpdatedRoi(func: (returnedData: UpdatedInterpretationRoiDTO) => void): void {
        this._connection!.off('UpdatedRoi', func)
    }


    public onUpdatedRoisBatch(func: (returnedData: UpdatedInterpretationRoiDTOList) => void): void {
        this._connection!.on('UpdatedRoisBatch', func)
    }

    public offUpdatedRoisBatch(func: (returnedData: UpdatedInterpretationRoiDTOList) => void): void {
        this._connection!.off('UpdatedRoisBatch', func)
    }


    public onDeletedRoi(func: (returnedData: number) => void): void {
        this._connection!.on('DeletedRoi', func)
    }

    public offDeletedRoi(func: (returnedData: number) => void): void {
        this._connection!.off('DeletedRoi', func)
    }


    public onCreatedArtefact(func: (returnedData: ArtefactDTO) => void): void {
        this._connection!.on('CreatedArtefact', func)
    }

    public offCreatedArtefact(func: (returnedData: ArtefactDTO) => void): void {
        this._connection!.off('CreatedArtefact', func)
    }


    public onDeletedArtefact(func: (returnedData: number) => void): void {
        this._connection!.on('DeletedArtefact', func)
    }

    public offDeletedArtefact(func: (returnedData: number) => void): void {
        this._connection!.off('DeletedArtefact', func)
    }


    public onUpdatedArtefact(func: (returnedData: ArtefactDTO) => void): void {
        this._connection!.on('UpdatedArtefact', func)
    }

    public offUpdatedArtefact(func: (returnedData: ArtefactDTO) => void): void {
        this._connection!.off('UpdatedArtefact', func)
    }

    public OnUpdatedEdition(func: (returnedData: EditionDTO) => {}): void {
        this._connection!.on('UpdatedEdition', func)
    }

    public OffUpdatedEdition(func: (returnedData: EditionDTO) => {}): void {
        this._connection!.off('UpdatedEdition', func)
    }
} 