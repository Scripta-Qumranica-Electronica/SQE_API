/*
 * Do not edit this file directly!
 * This hub class is autogenerated by the `sqe-realtime-hub-builder` project
 * based on the controllers in the `sqe-api-server` project. Changes made
 * there will automatically be incorporated here the next time the
 * `sqe-realtime-hub-builder` is run.
 */

using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.SignalR;
using SQE.API.DTO;
using SQE.API.Server.Helpers;
using SQE.DatabaseAccess.Helpers;

namespace SQE.API.Server.RealtimeHubs
{
	public partial class MainHub
	{
		/// <summary>
		///  Checks a WKT polygon to ensure validity. If the polygon is invalid,
		///  it attempts to construct a valid polygon that matches the original
		///  as closely as possible.
		/// </summary>
		/// <param name="payload">JSON object with the WKT polygon to validate</param>
		[Authorize]
		public WktPolygonDTO PostV1UtilsRepairWktPolygon(WktPolygonDTO payload)

		{
			try
			{
				return _utilService.RepairWktPolygonAsync(payload.wktPolygon);
			}
			catch (ApiException err)
			{
				throw new HubException(
						JsonSerializer.Serialize(
								new HttpExceptionMiddleware.ApiExceptionError(
										nameof(err)
										, err.Error
										, err is IExceptionWithData exceptionWithData
												? exceptionWithData.CustomReturnedData
												: null)));
			}
		}

		/// <summary>
		///  Provides the current version designation of the database along with
		///  the date it was updated to that version.
		/// </summary>
		/// <returns></returns>
		[AllowAnonymous]
		public async Task<DatabaseVersionDTO> GetV1UtilsDatabaseVersion()

		{
			try
			{
				return await _utilService.GetDatabaseVersion();
			}
			catch (ApiException err)
			{
				throw new HubException(
						JsonSerializer.Serialize(
								new HttpExceptionMiddleware.ApiExceptionError(
										nameof(err)
										, err.Error
										, err is IExceptionWithData exceptionWithData
												? exceptionWithData.CustomReturnedData
												: null)));
			}
		}

		/// <summary>
		///  Provides the current version designation of the API server along with
		///  the date it was updated to that version.
		/// </summary>
		/// <returns></returns>
		[AllowAnonymous]
		public async Task<APIVersionDTO> GetV1UtilsApiVersion()

		{
			try
			{
				return await _utilService.GetAPIVersion();
			}
			catch (ApiException err)
			{
				throw new HubException(
						JsonSerializer.Serialize(
								new HttpExceptionMiddleware.ApiExceptionError(
										nameof(err)
										, err.Error
										, err is IExceptionWithData exceptionWithData
												? exceptionWithData.CustomReturnedData
												: null)));
			}
		}
	}
}
