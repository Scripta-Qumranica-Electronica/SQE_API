/*
 * This file is automatically generated by the GenerateTestRequestObjects
 * project in the Utilities folder. Do not edit this file directly as
 * its contents may be overwritten at any point.
 *
 * Should a class here need to be altered for any reason, you should look
 * first to the auto generation program for possible updating to include
 * the needed special case. Otherwise, it is possible to create your own
 * manually written ApiRequest object, though this is generally discouraged.
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Web;
using Microsoft.AspNetCore.SignalR.Client;
using SQE.API.DTO;

namespace SQE.ApiTest.ApiRequests
{
	public static partial class Delete
	{
		public class V1_Editions_EditionId : RequestObject<EmptyInput, ArchiveTokenDTO>
		{
			private readonly uint         _editionId;
			private readonly List<string> _optional;
			private readonly string       _token;

			/// <summary>
			///  Archives an edition so that in no longer appears in user data and searches. An admin
			///  may use the archiveForAllEditors optional parameter in order to archive the edition
			///  for all editors (must be confirmed with an archive token).
			/// </summary>
			/// <param name="editionId">Unique Id of the desired edition to be archived</param>
			/// <param name="optional">Optional parameters: 'archiveForAllEditors'</param>
			/// <param name="token">token required when using optional 'archiveForAllEditors'</param>
			public V1_Editions_EditionId(
					uint           editionId
					, List<string> optional = null
					, string       token    = null)

			{
				_editionId = editionId;
				_optional = optional;
				_token = token;
				AvailableListeners = new Listeners();

				_listenerDict.Add(
						ListenerMethods.DeletedEdition
						, (DeletedEditionIsNull, DeletedEditionListener));
			}

			public Listeners AvailableListeners { get; }

			public ArchiveTokenDTO DeletedEdition { get; private set; }

			private void DeletedEditionListener(HubConnection signalrListener)
				=> signalrListener.On<ArchiveTokenDTO>(
						"DeletedEdition"
						, receivedData => DeletedEdition = receivedData);

			private bool DeletedEditionIsNull() => DeletedEdition == null;

			protected override string HttpPath() => RequestPath.Replace(
															"/edition-id"
															, $"/{HttpUtility.UrlEncode(_editionId.ToString())}")
													+ (_optional != null
															? $"?optional={string.Join("&optional=", _optional)}"
															: "")
													+ (_token != null
															? $"&token={_token}"
															: "");

			public override Func<HubConnection, Task<T>> SignalrRequest<T>()
			{
				return signalR => signalR.InvokeAsync<T>(
							   SignalrRequestString()
							   , _editionId
							   , _optional
							   , _token);
			}

			public override uint? GetEditionId() => _editionId;

			public class Listeners
			{
				public ListenerMethods DeletedEdition = ListenerMethods.DeletedEdition;
			}
		}
	}

	public static partial class Get
	{
		public class V1_Editions_AdminShareRequests :
				RequestObject<EmptyInput, AdminEditorRequestListDTO>
		{
			protected override string HttpPath() => RequestPath;

			public override Func<HubConnection, Task<T>> SignalrRequest<T>()
			{
				return signalR => signalR.InvokeAsync<T>(SignalrRequestString());
			}
		}

		public class V1_Editions_EditorInvitations :
				RequestObject<EmptyInput, EditorInvitationListDTO>
		{
			protected override string HttpPath() => RequestPath;

			public override Func<HubConnection, Task<T>> SignalrRequest<T>()
			{
				return signalR => signalR.InvokeAsync<T>(SignalrRequestString());
			}
		}

		public class V1_Editions_EditionId : RequestObject<EmptyInput, EditionGroupDTO>
		{
			private readonly uint _editionId;

			/// <summary>
			///  Provides details about the specified edition and all accessible alternate editions
			/// </summary>
			/// <param name="editionId">Unique Id of the desired edition</param>
			public V1_Editions_EditionId(uint editionId) => _editionId = editionId;

			protected override string HttpPath() => RequestPath.Replace(
					"/edition-id"
					, $"/{HttpUtility.UrlEncode(_editionId.ToString())}");

			public override Func<HubConnection, Task<T>> SignalrRequest<T>()
			{
				return signalR => signalR.InvokeAsync<T>(SignalrRequestString(), _editionId);
			}

			public override uint? GetEditionId() => _editionId;
		}

		public class V1_Editions : RequestObject<EmptyInput, EditionListDTO>
		{
			private readonly bool? _personal;
			private readonly bool? _published;

			/// <summary>
			///  Provides a listing of all editions accessible to the current user
			/// </summary>
			public V1_Editions(bool? published = null, bool? personal = null)

			{
				_published = published;
				_personal = personal;
			}

			protected override string HttpPath() => RequestPath
													+ (_published != null
															? $"?published={_published}"
															: "")
													+ (_personal != null
															? $"&personal={_personal}"
															: "");

			public override Func<HubConnection, Task<T>> SignalrRequest<T>()
			{
				return signalR => signalR.InvokeAsync<T>(
							   SignalrRequestString()
							   , _published
							   , _personal);
			}
		}

		public class V1_Editions_EditionId_ScriptCollection :
				RequestObject<EmptyInput, EditionScriptCollectionDTO>
		{
			private readonly uint _editionId;

			/// <summary>
			///  Provides spatial data for all letters in the edition
			/// </summary>
			/// <param name="editionId">Unique Id of the desired edition</param>
			/// <returns></returns>
			public V1_Editions_EditionId_ScriptCollection(uint editionId) => _editionId = editionId;

			protected override string HttpPath() => RequestPath.Replace(
					"/edition-id"
					, $"/{HttpUtility.UrlEncode(_editionId.ToString())}");

			public override Func<HubConnection, Task<T>> SignalrRequest<T>()
			{
				return signalR => signalR.InvokeAsync<T>(SignalrRequestString(), _editionId);
			}

			public override uint? GetEditionId() => _editionId;
		}

		public class V1_Editions_EditionId_ScriptLines :
				RequestObject<EmptyInput, EditionScriptLinesDTO>
		{
			private readonly uint _editionId;

			/// <summary>
			///  Provides spatial data for all letters in the edition organized and oriented
			///  by lines.
			/// </summary>
			/// <param name="editionId">Unique Id of the desired edition</param>
			/// <returns></returns>
			public V1_Editions_EditionId_ScriptLines(uint editionId) => _editionId = editionId;

			protected override string HttpPath() => RequestPath.Replace(
					"/edition-id"
					, $"/{HttpUtility.UrlEncode(_editionId.ToString())}");

			public override Func<HubConnection, Task<T>> SignalrRequest<T>()
			{
				return signalR => signalR.InvokeAsync<T>(SignalrRequestString(), _editionId);
			}

			public override uint? GetEditionId() => _editionId;
		}

		public class V1_Editions_EditionId_Metadata :
				RequestObject<EmptyInput, EditionManuscriptMetadataDTO>
		{
			private readonly uint _editionId;

			/// <summary>
			///  Retrieve extra institutional metadata concerning the edition
			///  manuscript if available.
			/// </summary>
			/// <param name="editionId">Unique Id of the desired edition</param>
			/// <returns></returns>
			public V1_Editions_EditionId_Metadata(uint editionId) => _editionId = editionId;

			protected override string HttpPath() => RequestPath.Replace(
					"/edition-id"
					, $"/{HttpUtility.UrlEncode(_editionId.ToString())}");

			public override Func<HubConnection, Task<T>> SignalrRequest<T>()
			{
				return signalR => signalR.InvokeAsync<T>(SignalrRequestString(), _editionId);
			}

			public override uint? GetEditionId() => _editionId;
		}

		public class V1_Manuscripts_ManuscriptId_Editions :
				RequestObject<EmptyInput, EditionListDTO>
		{
			private readonly uint _manuscriptId;

			public V1_Manuscripts_ManuscriptId_Editions(uint manuscriptId)
				=> _manuscriptId = manuscriptId;

			protected override string HttpPath() => RequestPath.Replace(
					"/manuscript-id"
					, $"/{HttpUtility.UrlEncode(_manuscriptId.ToString())}");

			public override Func<HubConnection, Task<T>> SignalrRequest<T>()
			{
				return signalR => signalR.InvokeAsync<T>(SignalrRequestString(), _manuscriptId);
			}
		}
	}

	public static partial class Post
	{
		public class V1_Editions_EditionId_AddEditorRequest :
				RequestObject<InviteEditorDTO, EmptyOutput>
		{
			private readonly uint            _editionId;
			private readonly InviteEditorDTO _payload;

			/// <summary>
			///  Adds an editor to the specified edition
			/// </summary>
			/// <param name="editionId">Unique Id of the desired edition</param>
			/// <param name="payload">JSON object with the attributes of the new editor</param>
			public V1_Editions_EditionId_AddEditorRequest(uint editionId, InviteEditorDTO payload) :
					base(payload)
			{
				_editionId = editionId;
				_payload = payload;
				AvailableListeners = new Listeners();

				_listenerDict.Add(
						ListenerMethods.RequestedEditor
						, (RequestedEditorIsNull, RequestedEditorListener));
			}

			public Listeners AvailableListeners { get; }

			public EditorInvitationDTO RequestedEditor { get; private set; }

			private void RequestedEditorListener(HubConnection signalrListener)
				=> signalrListener.On<EditorInvitationDTO>(
						"RequestedEditor"
						, receivedData => RequestedEditor = receivedData);

			private bool RequestedEditorIsNull() => RequestedEditor == null;

			protected override string HttpPath() => RequestPath.Replace(
					"/edition-id"
					, $"/{HttpUtility.UrlEncode(_editionId.ToString())}");

			public override Func<HubConnection, Task<T>> SignalrRequest<T>()
			{
				return signalR => signalR.InvokeAsync<T>(
							   SignalrRequestString()
							   , _editionId
							   , _payload);
			}

			public override uint? GetEditionId() => _editionId;

			public class Listeners
			{
				public ListenerMethods RequestedEditor = ListenerMethods.RequestedEditor;
			}
		}

		public class V1_Editions_ConfirmEditorship_Token :
				RequestObject<EmptyInput, DetailedEditorRightsDTO>
		{
			private readonly string _token;

			/// <summary>
			///  Confirm addition of an editor to the specified edition
			/// </summary>
			/// <param name="token">JWT for verifying the request confirmation</param>
			public V1_Editions_ConfirmEditorship_Token(string token)

			{
				_token = token;
				AvailableListeners = new Listeners();

				_listenerDict.Add(
						ListenerMethods.CreatedEditor
						, (CreatedEditorIsNull, CreatedEditorListener));
			}

			public Listeners AvailableListeners { get; }

			public DetailedEditorRightsDTO CreatedEditor { get; private set; }

			private void CreatedEditorListener(HubConnection signalrListener)
				=> signalrListener.On<DetailedEditorRightsDTO>(
						"CreatedEditor"
						, receivedData => CreatedEditor = receivedData);

			private bool CreatedEditorIsNull() => CreatedEditor == null;

			protected override string HttpPath() => RequestPath.Replace(
					"/token"
					, $"/{HttpUtility.UrlEncode(_token)}");

			public override Func<HubConnection, Task<T>> SignalrRequest<T>()
			{
				return signalR => signalR.InvokeAsync<T>(SignalrRequestString(), _token);
			}

			public class Listeners
			{
				public ListenerMethods CreatedEditor = ListenerMethods.CreatedEditor;
			}
		}

		public class V1_Editions_EditionId : RequestObject<EditionCopyDTO, EditionDTO>
		{
			private readonly uint           _editionId;
			private readonly EditionCopyDTO _payload;

			/// <summary>
			///  Creates a copy of the specified edition
			/// </summary>
			/// <param name="editionId">Unique Id of the desired edition</param>
			/// <param name="request">JSON object with the attributes to be changed in the copied edition</param>
			public V1_Editions_EditionId(uint editionId, EditionCopyDTO payload) : base(payload)
			{
				_editionId = editionId;
				_payload = payload;
				AvailableListeners = new Listeners();

				_listenerDict.Add(
						ListenerMethods.CreatedEdition
						, (CreatedEditionIsNull, CreatedEditionListener));
			}

			public Listeners AvailableListeners { get; }

			public EditionDTO CreatedEdition { get; private set; }

			private void CreatedEditionListener(HubConnection signalrListener)
				=> signalrListener.On<EditionDTO>(
						"CreatedEdition"
						, receivedData => CreatedEdition = receivedData);

			private bool CreatedEditionIsNull() => CreatedEdition == null;

			protected override string HttpPath() => RequestPath.Replace(
					"/edition-id"
					, $"/{HttpUtility.UrlEncode(_editionId.ToString())}");

			public override Func<HubConnection, Task<T>> SignalrRequest<T>()
			{
				return signalR => signalR.InvokeAsync<T>(
							   SignalrRequestString()
							   , _editionId
							   , _payload);
			}

			public override uint? GetEditionId() => _editionId;

			public class Listeners
			{
				public ListenerMethods CreatedEdition = ListenerMethods.CreatedEdition;
			}
		}
	}

	public static partial class Put
	{
		public class V1_Editions_EditionId_Editors_EditorEmailId :
				RequestObject<UpdateEditorRightsDTO, DetailedEditorRightsDTO>
		{
			private readonly uint                  _editionId;
			private readonly string                _editorEmailId;
			private readonly UpdateEditorRightsDTO _payload;

			/// <summary>
			///  Changes the rights for an editor of the specified edition
			/// </summary>
			/// <param name="editionId">Unique Id of the desired edition</param>
			/// <param name="editorEmailId">Email address of the editor whose permissions are being changed</param>
			/// <param name="payload">JSON object with the attributes of the new editor</param>
			public V1_Editions_EditionId_Editors_EditorEmailId(
					uint                    editionId
					, string                editorEmailId
					, UpdateEditorRightsDTO payload) : base(payload)
			{
				_editionId = editionId;
				_editorEmailId = editorEmailId;
				_payload = payload;
				AvailableListeners = new Listeners();

				_listenerDict.Add(
						ListenerMethods.CreatedEditor
						, (CreatedEditorIsNull, CreatedEditorListener));
			}

			public Listeners AvailableListeners { get; }

			public DetailedEditorRightsDTO CreatedEditor { get; private set; }

			private void CreatedEditorListener(HubConnection signalrListener)
				=> signalrListener.On<DetailedEditorRightsDTO>(
						"CreatedEditor"
						, receivedData => CreatedEditor = receivedData);

			private bool CreatedEditorIsNull() => CreatedEditor == null;

			protected override string HttpPath() => RequestPath
													.Replace(
															"/edition-id"
															, $"/{HttpUtility.UrlEncode(_editionId.ToString())}")
													.Replace(
															"/editor-email-id"
															, $"/{HttpUtility.UrlEncode(_editorEmailId)}");

			public override Func<HubConnection, Task<T>> SignalrRequest<T>()
			{
				return signalR => signalR.InvokeAsync<T>(
							   SignalrRequestString()
							   , _editionId
							   , _editorEmailId
							   , _payload);
			}

			public override uint? GetEditionId() => _editionId;

			public class Listeners
			{
				public ListenerMethods CreatedEditor = ListenerMethods.CreatedEditor;
			}
		}

		public class V1_Editions_EditionId : RequestObject<EditionUpdateRequestDTO, EditionDTO>
		{
			private readonly uint                    _editionId;
			private readonly EditionUpdateRequestDTO _payload;

			/// <summary>
			///  Updates data for the specified edition
			/// </summary>
			/// <param name="editionId">Unique Id of the desired edition</param>
			/// <param name="request">JSON object with the attributes to be updated</param>
			public V1_Editions_EditionId(uint editionId, EditionUpdateRequestDTO payload) : base(
					payload)
			{
				_editionId = editionId;
				_payload = payload;
				AvailableListeners = new Listeners();

				_listenerDict.Add(
						ListenerMethods.UpdatedEdition
						, (UpdatedEditionIsNull, UpdatedEditionListener));
			}

			public Listeners AvailableListeners { get; }

			public EditionDTO UpdatedEdition { get; private set; }

			private void UpdatedEditionListener(HubConnection signalrListener)
				=> signalrListener.On<EditionDTO>(
						"UpdatedEdition"
						, receivedData => UpdatedEdition = receivedData);

			private bool UpdatedEditionIsNull() => UpdatedEdition == null;

			protected override string HttpPath() => RequestPath.Replace(
					"/edition-id"
					, $"/{HttpUtility.UrlEncode(_editionId.ToString())}");

			public override Func<HubConnection, Task<T>> SignalrRequest<T>()
			{
				return signalR => signalR.InvokeAsync<T>(
							   SignalrRequestString()
							   , _editionId
							   , _payload);
			}

			public override uint? GetEditionId() => _editionId;

			public class Listeners
			{
				public ListenerMethods UpdatedEdition = ListenerMethods.UpdatedEdition;
			}
		}
	}
}
