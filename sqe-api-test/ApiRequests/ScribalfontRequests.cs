/*
 * This file is automatically generated by the GenerateTestRequestObjects
 * project in the Utilities folder. Do not edit this file directly as
 * its contents may be overwritten at any point.
 *
 * Should a class here need to be altered for any reason, you should look
 * first to the auto generation program for possible updating to include
 * the needed special case. Otherwise, it is possible to create your own
 * manually written ApiRequest object, though this is generally discouraged.
 */

using System;
using System.Threading.Tasks;
using System.Web;
using Microsoft.AspNetCore.SignalR.Client;
using SQE.API.DTO;

namespace SQE.ApiTest.ApiRequests
{
	public static partial class Delete
	{
		public class V1_Editions_EditionId_Scribalfonts_ScribalFontId :
				RequestObject<EmptyInput, EmptyOutput>
		{
			private readonly uint _editionId;
			private readonly uint _scribalFontId;

			/// <summary>
			///  Deletes a scribal font
			/// </summary>
			/// <param name="editionId">Edition from which to delete the scribal font</param>
			/// <param name="scribalFontId">The scribal font to be deleted</param>
			/// <returns></returns>
			public V1_Editions_EditionId_Scribalfonts_ScribalFontId(
					uint   editionId
					, uint scribalFontId)

			{
				_editionId = editionId;
				_scribalFontId = scribalFontId;
				AvailableListeners = new Listeners();

				_listenerDict.Add(
						ListenerMethods.DeletedScribalFont
						, (DeletedScribalFontIsNull, DeletedScribalFontListener));
			}

			public Listeners AvailableListeners { get; }

			public DeleteScribalFontDTO DeletedScribalFont { get; private set; }

			private void DeletedScribalFontListener(HubConnection signalrListener)
				=> signalrListener.On<DeleteScribalFontDTO>(
						"DeletedScribalFont"
						, receivedData => DeletedScribalFont = receivedData);

			private bool DeletedScribalFontIsNull() => DeletedScribalFont == null;

			protected override string HttpPath() => RequestPath
													.Replace(
															"/edition-id"
															, $"/{HttpUtility.UrlEncode(_editionId.ToString())}")
													.Replace(
															"/scribal-font-id"
															, $"/{HttpUtility.UrlEncode(_scribalFontId.ToString())}");

			public override Func<HubConnection, Task<T>> SignalrRequest<T>()
			{
				return signalR => signalR.InvokeAsync<T>(
							   SignalrRequestString()
							   , _editionId
							   , _scribalFontId);
			}

			public override uint? GetEditionId() => _editionId;

			public class Listeners
			{
				public ListenerMethods DeletedScribalFont = ListenerMethods.DeletedScribalFont;
			}
		}

		public class
				V1_Editions_EditionId_Scribalfonts_ScribalFontId_KerningPairs_FirstCharacter_SecondCharacter :
						RequestObject<EmptyInput, EmptyOutput>
		{
			private readonly uint   _editionId;
			private readonly string _firstCharacter;
			private readonly uint   _scribalFontId;
			private readonly string _secondCharacter;

			/// <summary>
			///  Deletes a kerning pair from a scribal font
			/// </summary>
			/// <param name="editionId">Edition from which to delete the kerning pair</param>
			/// <param name="scribalFontId">Scribal font from which to delete the kerning pair</param>
			/// <param name="firstCharacter">The first character of the kerning pair</param>
			/// <param name="secondCharacter">The second character of the kerning pair</param>
			/// <returns></returns>
			public
					V1_Editions_EditionId_Scribalfonts_ScribalFontId_KerningPairs_FirstCharacter_SecondCharacter(
							uint     editionId
							, uint   scribalFontId
							, string firstCharacter
							, string secondCharacter)

			{
				_editionId = editionId;
				_scribalFontId = scribalFontId;
				_firstCharacter = firstCharacter;
				_secondCharacter = secondCharacter;
				AvailableListeners = new Listeners();

				_listenerDict.Add(
						ListenerMethods.DeletedScribalFontKerningPair
						, (DeletedScribalFontKerningPairIsNull
						   , DeletedScribalFontKerningPairListener));
			}

			public Listeners AvailableListeners { get; }

			public DeleteKernPairDTO DeletedScribalFontKerningPair { get; private set; }

			private void DeletedScribalFontKerningPairListener(HubConnection signalrListener)
				=> signalrListener.On<DeleteKernPairDTO>(
						"DeletedScribalFontKerningPair"
						, receivedData => DeletedScribalFontKerningPair = receivedData);

			private bool DeletedScribalFontKerningPairIsNull()
				=> DeletedScribalFontKerningPair == null;

			protected override string HttpPath() => RequestPath
													.Replace(
															"/edition-id"
															, $"/{HttpUtility.UrlEncode(_editionId.ToString())}")
													.Replace(
															"/scribal-font-id"
															, $"/{HttpUtility.UrlEncode(_scribalFontId.ToString())}")
													.Replace(
															"/first-character"
															, $"/{HttpUtility.UrlEncode(_firstCharacter)}")
													.Replace(
															"/second-character"
															, $"/{HttpUtility.UrlEncode(_secondCharacter)}");

			public override Func<HubConnection, Task<T>> SignalrRequest<T>()
			{
				return signalR => signalR.InvokeAsync<T>(
							   SignalrRequestString()
							   , _editionId
							   , _scribalFontId
							   , _firstCharacter
							   , _secondCharacter);
			}

			public override uint? GetEditionId() => _editionId;

			public class Listeners
			{
				public ListenerMethods DeletedScribalFontKerningPair =
						ListenerMethods.DeletedScribalFontKerningPair;
			}
		}

		public class V1_Editions_EditionId_Scribalfonts_ScribalFontId_Glyphs_GlyphCharacter :
				RequestObject<EmptyInput, EmptyOutput>
		{
			private readonly uint   _editionId;
			private readonly string _glyphCharacter;
			private readonly uint   _scribalFontId;

			/// <summary>
			///  Deletes glyph information from a scribal font
			/// </summary>
			/// <param name="editionId">Edition from which the glyph is deleted</param>
			/// <param name="scribalFontId">Scribal font from which the glyph is deleted</param>
			/// <param name="glyphCharacter">The glyph to be deleted</param>
			/// <returns></returns>
			public V1_Editions_EditionId_Scribalfonts_ScribalFontId_Glyphs_GlyphCharacter(
					uint     editionId
					, uint   scribalFontId
					, string glyphCharacter)

			{
				_editionId = editionId;
				_scribalFontId = scribalFontId;
				_glyphCharacter = glyphCharacter;
				AvailableListeners = new Listeners();

				_listenerDict.Add(
						ListenerMethods.DeletedScribalFontGlyph
						, (DeletedScribalFontGlyphIsNull, DeletedScribalFontGlyphListener));
			}

			public Listeners AvailableListeners { get; }

			public DeleteGlyphDataDTO DeletedScribalFontGlyph { get; private set; }

			private void DeletedScribalFontGlyphListener(HubConnection signalrListener)
				=> signalrListener.On<DeleteGlyphDataDTO>(
						"DeletedScribalFontGlyph"
						, receivedData => DeletedScribalFontGlyph = receivedData);

			private bool DeletedScribalFontGlyphIsNull() => DeletedScribalFontGlyph == null;

			protected override string HttpPath() => RequestPath
													.Replace(
															"/edition-id"
															, $"/{HttpUtility.UrlEncode(_editionId.ToString())}")
													.Replace(
															"/scribal-font-id"
															, $"/{HttpUtility.UrlEncode(_scribalFontId.ToString())}")
													.Replace(
															"/glyph-character"
															, $"/{HttpUtility.UrlEncode(_glyphCharacter)}");

			public override Func<HubConnection, Task<T>> SignalrRequest<T>()
			{
				return signalR => signalR.InvokeAsync<T>(
							   SignalrRequestString()
							   , _editionId
							   , _scribalFontId
							   , _glyphCharacter);
			}

			public override uint? GetEditionId() => _editionId;

			public class Listeners
			{
				public ListenerMethods DeletedScribalFontGlyph =
						ListenerMethods.DeletedScribalFontGlyph;
			}
		}
	}

	public static partial class Get
	{
		public class V1_Editions_EditionId_Scribalfonts :
				RequestObject<EmptyInput, ScriptDataListDTO>
		{
			private readonly uint _editionId;

			/// <summary>
			///  Get the details of the scribal font for an edition that
			///  are needed to generate reconstructed text layout.
			/// </summary>
			/// <param name="editionId">Edition for which to get the scribal font information</param>
			/// <returns></returns>
			public V1_Editions_EditionId_Scribalfonts(uint editionId) => _editionId = editionId;

			protected override string HttpPath() => RequestPath.Replace(
					"/edition-id"
					, $"/{HttpUtility.UrlEncode(_editionId.ToString())}");

			public override Func<HubConnection, Task<T>> SignalrRequest<T>()
			{
				return signalR => signalR.InvokeAsync<T>(SignalrRequestString(), _editionId);
			}

			public override uint? GetEditionId() => _editionId;
		}
	}

	public static partial class Post
	{
		public class V1_Editions_EditionId_Scribalfonts :
				RequestObject<CreateScriptDataDTO, ScriptDataDTO>
		{
			private readonly uint                _editionId;
			private readonly CreateScriptDataDTO _payload;

			/// <summary>
			///  Creates a new scribal font for the edition
			/// </summary>
			/// <param name="editionId">Edition for which to create the new scribal font</param>
			/// <param name="scriptData">Basic information about the new scribal font</param>
			/// <returns></returns>
			public V1_Editions_EditionId_Scribalfonts(uint editionId, CreateScriptDataDTO payload)
					: base(payload)
			{
				_editionId = editionId;
				_payload = payload;
				AvailableListeners = new Listeners();

				_listenerDict.Add(
						ListenerMethods.CreatedScribalFontInfo
						, (CreatedScribalFontInfoIsNull, CreatedScribalFontInfoListener));
			}

			public Listeners AvailableListeners { get; }

			public ScriptDataDTO CreatedScribalFontInfo { get; private set; }

			private void CreatedScribalFontInfoListener(HubConnection signalrListener)
				=> signalrListener.On<ScriptDataDTO>(
						"CreatedScribalFontInfo"
						, receivedData => CreatedScribalFontInfo = receivedData);

			private bool CreatedScribalFontInfoIsNull() => CreatedScribalFontInfo == null;

			protected override string HttpPath() => RequestPath.Replace(
					"/edition-id"
					, $"/{HttpUtility.UrlEncode(_editionId.ToString())}");

			public override Func<HubConnection, Task<T>> SignalrRequest<T>()
			{
				return signalR => signalR.InvokeAsync<T>(
							   SignalrRequestString()
							   , _editionId
							   , _payload);
			}

			public override uint? GetEditionId() => _editionId;

			public class Listeners
			{
				public ListenerMethods CreatedScribalFontInfo =
						ListenerMethods.CreatedScribalFontInfo;
			}
		}

		public class V1_Editions_EditionId_Scribalfonts_ScribalFontId_KerningPairs :
				RequestObject<CreateKernPairDTO, KernPairDTO>
		{
			private readonly uint              _editionId;
			private readonly CreateKernPairDTO _payload;
			private readonly uint              _scribalFontId;

			/// <summary>
			///  Creates or updates a kerning pair for the scribal font.
			///  If the kern pair does not yet exists, it is created.
			///  If the kern pair already exists, it is updated.
			/// </summary>
			/// <param name="editionId">Edition for which to create or update the kerning pair</param>
			/// <param name="scribalFontId">The scribal font the kerning pair belongs to</param>
			/// <param name="kernPair">The kerning information</param>
			/// <returns></returns>
			public V1_Editions_EditionId_Scribalfonts_ScribalFontId_KerningPairs(
					uint                editionId
					, uint              scribalFontId
					, CreateKernPairDTO payload) : base(payload)
			{
				_editionId = editionId;
				_scribalFontId = scribalFontId;
				_payload = payload;
				AvailableListeners = new Listeners();

				_listenerDict.Add(
						ListenerMethods.CreatedScribalFontKerningPair
						, (CreatedScribalFontKerningPairIsNull
						   , CreatedScribalFontKerningPairListener));
			}

			public Listeners AvailableListeners { get; }

			public KernPairDTO CreatedScribalFontKerningPair { get; private set; }

			private void CreatedScribalFontKerningPairListener(HubConnection signalrListener)
				=> signalrListener.On<KernPairDTO>(
						"CreatedScribalFontKerningPair"
						, receivedData => CreatedScribalFontKerningPair = receivedData);

			private bool CreatedScribalFontKerningPairIsNull()
				=> CreatedScribalFontKerningPair == null;

			protected override string HttpPath() => RequestPath
													.Replace(
															"/edition-id"
															, $"/{HttpUtility.UrlEncode(_editionId.ToString())}")
													.Replace(
															"/scribal-font-id"
															, $"/{HttpUtility.UrlEncode(_scribalFontId.ToString())}");

			public override Func<HubConnection, Task<T>> SignalrRequest<T>()
			{
				return signalR => signalR.InvokeAsync<T>(
							   SignalrRequestString()
							   , _editionId
							   , _scribalFontId
							   , _payload);
			}

			public override uint? GetEditionId() => _editionId;

			public class Listeners
			{
				public ListenerMethods CreatedScribalFontKerningPair =
						ListenerMethods.CreatedScribalFontKerningPair;
			}
		}

		public class V1_Editions_EditionId_Scribalfonts_ScribalFontId_Glyphs :
				RequestObject<CreateGlyphDataDTO, GlyphDataDTO>
		{
			private readonly uint               _editionId;
			private readonly CreateGlyphDataDTO _payload;
			private readonly uint               _scribalFontId;

			/// <summary>
			///  Creates or updates information about a scribal font glyph.
			///  If information for the glyph does not yet exist, a new glyph is created.
			///  If information for the glyph already exists, that glyph information is updated.
			/// </summary>
			/// <param name="editionId">Edition in which the glyph is created or updated</param>
			/// <param name="scribalFontId">Scribal font in which the glyph is created or updated</param>
			/// <param name="glyph">Information about the glyph</param>
			/// <returns></returns>
			public V1_Editions_EditionId_Scribalfonts_ScribalFontId_Glyphs(
					uint                 editionId
					, uint               scribalFontId
					, CreateGlyphDataDTO payload) : base(payload)
			{
				_editionId = editionId;
				_scribalFontId = scribalFontId;
				_payload = payload;
				AvailableListeners = new Listeners();

				_listenerDict.Add(
						ListenerMethods.CreatedScribalFontGlyph
						, (CreatedScribalFontGlyphIsNull, CreatedScribalFontGlyphListener));
			}

			public Listeners AvailableListeners { get; }

			public GlyphDataDTO CreatedScribalFontGlyph { get; private set; }

			private void CreatedScribalFontGlyphListener(HubConnection signalrListener)
				=> signalrListener.On<GlyphDataDTO>(
						"CreatedScribalFontGlyph"
						, receivedData => CreatedScribalFontGlyph = receivedData);

			private bool CreatedScribalFontGlyphIsNull() => CreatedScribalFontGlyph == null;

			protected override string HttpPath() => RequestPath
													.Replace(
															"/edition-id"
															, $"/{HttpUtility.UrlEncode(_editionId.ToString())}")
													.Replace(
															"/scribal-font-id"
															, $"/{HttpUtility.UrlEncode(_scribalFontId.ToString())}");

			public override Func<HubConnection, Task<T>> SignalrRequest<T>()
			{
				return signalR => signalR.InvokeAsync<T>(
							   SignalrRequestString()
							   , _editionId
							   , _scribalFontId
							   , _payload);
			}

			public override uint? GetEditionId() => _editionId;

			public class Listeners
			{
				public ListenerMethods CreatedScribalFontGlyph =
						ListenerMethods.CreatedScribalFontGlyph;
			}
		}
	}

	public static partial class Put
	{
		public class V1_Editions_EditionId_Scribalfonts_ScribalFontId_ScribalFontData :
				RequestObject<CreateScriptDataDTO, ScriptDataDTO>
		{
			private readonly uint                _editionId;
			private readonly CreateScriptDataDTO _payload;
			private readonly uint                _scribalFontId;

			/// <summary>
			///  Updates the basic information about a scribal font
			/// </summary>
			/// <param name="editionId">Edition for which to update the scribal font</param>
			/// <param name="scribalFontId">The scribal font to be updated</param>
			/// <param name="scriptData">The updated scribal font information</param>
			/// <returns></returns>
			public V1_Editions_EditionId_Scribalfonts_ScribalFontId_ScribalFontData(
					uint                  editionId
					, uint                scribalFontId
					, CreateScriptDataDTO payload) : base(payload)
			{
				_editionId = editionId;
				_scribalFontId = scribalFontId;
				_payload = payload;
				AvailableListeners = new Listeners();

				_listenerDict.Add(
						ListenerMethods.UpdatedScribalFontInfo
						, (UpdatedScribalFontInfoIsNull, UpdatedScribalFontInfoListener));
			}

			public Listeners AvailableListeners { get; }

			public ScriptDataDTO UpdatedScribalFontInfo { get; private set; }

			private void UpdatedScribalFontInfoListener(HubConnection signalrListener)
				=> signalrListener.On<ScriptDataDTO>(
						"UpdatedScribalFontInfo"
						, receivedData => UpdatedScribalFontInfo = receivedData);

			private bool UpdatedScribalFontInfoIsNull() => UpdatedScribalFontInfo == null;

			protected override string HttpPath() => RequestPath
													.Replace(
															"/edition-id"
															, $"/{HttpUtility.UrlEncode(_editionId.ToString())}")
													.Replace(
															"/scribal-font-id"
															, $"/{HttpUtility.UrlEncode(_scribalFontId.ToString())}");

			public override Func<HubConnection, Task<T>> SignalrRequest<T>()
			{
				return signalR => signalR.InvokeAsync<T>(
							   SignalrRequestString()
							   , _editionId
							   , _scribalFontId
							   , _payload);
			}

			public override uint? GetEditionId() => _editionId;

			public class Listeners
			{
				public ListenerMethods UpdatedScribalFontInfo =
						ListenerMethods.UpdatedScribalFontInfo;
			}
		}
	}
}
