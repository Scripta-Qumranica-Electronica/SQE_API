using System;
using SQE.API.DTO.Validators;
using SQE.API.Server.Helpers;
using SQE.DatabaseAccess.Helpers;
using Xunit;

namespace SQE.ApiTest
{
    public class ValidationTests
    {
        /// <summary>
        ///     Convenience wrapper to test the polygon validation code
        /// </summary>
        /// <param name="poly">The bad polygon</param>
        /// <param name="expectedResult">The expected repaired form of the bad polygon</param>
        /// <returns>Void</returns>
        private static void _testBadPoly(string poly, string expectedResult)
        {
            var repaired = GeometryValidation.ValidatePolygon(poly, "artefact", true);
            Assert.Equal(_removeWktSpaces(expectedResult), _removeWktSpaces(repaired));

            try
            {
                GeometryValidation.ValidatePolygon(poly, "artefact");
            }
            catch (Exception err)
            {
                Assert.True(err is StandardExceptions.InputDataRuleViolationException);
                Assert.False(err is IExceptionWithData);
            }
        }

        private static string _removeWktSpaces(string wkt)
        {
            return wkt.Replace(" (", "(").Replace(", ", ",");
        }

        [Fact]
        public void AutoFixesBadInnerOuterPolys()
        {
            const string inputPoly =
                "POLYGON ((0 0, 0 200, 200 200, 200 0, 0 0), (50 150, 150 150, 150 50, 50 50, 50 150))";
            const string outputPoly =
                "POLYGON ((0 0, 0 200, 200 200, 200 0, 0 0), (50 150,50 50,150 50,150 150,50 150))";
            _testBadPoly(inputPoly, outputPoly);
        }

        [Fact]
        public void DoesNotSimplifyMinuteFeatures()
        {
            var inputPoly = "POLYGON ((0 0,0.000000000001 5,0 10,10 10,9.99999999999 5,10 0,0 0))";
            _testBadPoly(inputPoly, inputPoly);
        }

        [Fact]
        public void FixesAdjacentInnerRingsPolys()
        {
            const string inputPoly = "POLYGON((0 0,10 0,10 10,0 10,0 0),(1 1,1 8,3 8,3 1,1 1),(3 1,3 8,5 8,5 1,3 1))";
            const string outputPoly =
                "POLYGON ((0 0, 0 10, 10 10, 10 0, 0 0), (3 1, 5 1, 5 8, 3.0000000000000018 7.9999999999999964, 3.0000000000000018 1.0000000000000009, 3 1), (1 1, 2.9999999999999982 1, 2.9999999999999982 7.9999999999999964, 1 8, 1 1))";
            _testBadPoly(inputPoly, outputPoly);
        }

        [Fact]
        public void FixesDanglingEdgeErrorPoly()
        {
            const string inputPoly = "POLYGON((0 0, 10 0, 10 10, 15 5, 10 10, 0 10, 0 0))";
            const string outputPoly = "POLYGON ((0 0, 0 10, 10 10, 15 5, 10 9.9999999999999964, 10 0, 0 0))";
            _testBadPoly(inputPoly, outputPoly);
        }

        [Fact]
        public void FixesInnerOuterEdgeErrorPoly()
        {
            const string inputPoly = "POLYGON((0 0, 10 0, 10 10, 0 10, 0 0),(5 2,5 7,10 7, 10 2, 5 2))";
            const string outputPoly =
                "POLYGON ((0 0, 0 10, 10 10, 10 0, 0 0), (5 2, 9.9999999999999964 1.9999999999999996, 9.9999999999999964 6.9999999999999982, 5 7, 5 2))";
            _testBadPoly(inputPoly, outputPoly);
        }

        [Fact]
        public void FixesNestedInnerPolys()
        {
            const string inputPoly =
                "POLYGON((0 0, 10 0, 10 10, 0 10, 0 0), (2 8, 5 8, 5 2, 2 2, 2 8), (3 3, 4 3, 3 4, 3 3))";
            const string outputPoly = "POLYGON ((0 0, 0 10, 10 10, 10 0, 0 0), (2 2, 5 2, 5 8, 2 8, 2 2))";
            _testBadPoly(inputPoly, outputPoly);
        }

        [Fact]
        public void FixesOpenPoly()
        {
            const string inputPoly = "POLYGON((0 0, 10 0, 10 10, 0 10))";
            const string outputPoly = "POLYGON ((0 0, 0 10, 10 10, 10 0, 0 0))";
            _testBadPoly(inputPoly, outputPoly);
        }

        [Fact]
        public void FixesSelfIntersectingErrorPoly1()
        {
            var inputPoly =
                "POLYGON ((0 0, 30 110, 95 109, 146 64, 195 127, 150 210, 280 240, 150 170, 144 105, 75 84, 63 25, 0 0))";
            var outputPoly =
                "POLYGON ((0 0, 30 110, 95 109, 110.93749999999997 94.937500000000028, 110.93750000000003 94.937500000000028, 144 105, 150 170, 166.78622668579621 179.03873744619793, 166.78622668579621 179.03873744619804, 150 210, 280 240, 166.78622668579632 179.03873744619804, 166.78622668579632 179.03873744619793, 195 127, 146 64, 110.93750000000003 94.937499999999972, 110.93749999999997 94.937499999999972, 75 84, 63 25, 0 0))";
            _testBadPoly(inputPoly, outputPoly);
        }

        [Fact]
        public void FixesSelfIntersectingErrorPoly2()
        {
            var inputPoly = "POLYGON ((0 0, 15 20, 20 30, 25 45, 30 100, 45 40, 47 0, 50 1, 55 5, 50 10, 45 5, 0 0))";
            var outputPoly =
                "POLYGON ((0 0, 15 20, 20 30, 25 45, 30 100, 45 40, 46.66666666666665 6.6666666666666687, 46.666666666666679 6.6666666666666687, 50 10, 55 5, 50 1, 47 0, 46.666666666666679 6.6666666666666652, 46.66666666666665 6.6666666666666652, 45 5, 0 0))";
            _testBadPoly(inputPoly, outputPoly);
        }

        [Fact]
        public void FixesSelfIntersectingErrorPoly3()
        {
            var inputPoly =
                "POLYGON ((0 0, 30 110, 95 109, 146 64, 195 127, 150 210, 280 240, 150 170, 144 105, 75 84, 63 25, 0 0), (40 60, 60 50, 30 40, 40 60)";
            var outputPoly =
                "POLYGON ((0 0, 30 110, 95 109, 110.93749999999997 94.937500000000028, 110.93750000000003 94.937500000000028, 144 105, 150 170, 166.78622668579621 179.03873744619793, 166.78622668579621 179.03873744619804, 150 210, 280 240, 166.78622668579632 179.03873744619804, 166.78622668579632 179.03873744619793, 195 127, 146 64, 110.93750000000003 94.937499999999972, 110.93749999999997 94.937499999999972, 75 84, 63 25, 0 0), (30 40, 60 50, 40 60, 30 40))";
            _testBadPoly(inputPoly, outputPoly);
        }

        [Fact]
        public void FixesUnclosedPolys()
        {
            const string inputPoly = "POLYGON ((0 0, 0 200, 200 200, 200 0), (50 150, 150 150, 150 50, 50 50))";
            const string outputPoly =
                "POLYGON ((0 0, 0 200, 200 200, 200 0, 0 0), (50 50, 150 50, 150 150, 50 150, 50 50))";
            _testBadPoly(inputPoly, outputPoly);
        }

        [Fact]
        public void FixesVeryComplexBadPolys()
        {
            var inputPoly =
                "POLYGON ((2576.946044921875 1052.04296875,2576.946044921875 1047.0029296875,2576.946044921875 1041.962158203125,2581.98681640625 1036.9219970703125,2587.027587890625 1031.8814697265625,2592.0673828125 1026.840576171875,2597.10888671875 1021.800537109375,2597.10888671875 1016.7597045898438,2612.229248046875 1006.6787719726562,2617.27001953125 1001.6387329101562,2622.31103515625 996.59814453125,2622.31103515625 991.5572509765625,2627.350830078125 986.5172119140625,2632.39208984375 981.476318359375,2637.431884765625 976.436279296875,2642.472412109375 976.436279296875,2657.59423828125 961.3147583007812,2662.634033203125 956.27392578125,2677.755615234375 946.1929931640625,2692.877685546875 946.1929931640625,2697.91748046875 941.1529541015625,2702.958740234375 936.1121215820312,2707.99853515625 936.1121215820312,2713.0390625 931.072021484375,2718.079345703125 931.072021484375,2723.1201171875 931.072021484375,2728.160888671875 931.072021484375,2738.2421875 931.072021484375,2743.281982421875 931.072021484375,2753.362548828125 931.072021484375,2773.525634765625 946.1929931640625,2783.605712890625 951.23388671875,2828.97021484375 966.3553466796875,2849.132080078125 971.3954467773438,2869.293701171875 981.476318359375,2909.617431640625 1001.6387329101562,2924.739013671875 1006.6787719726562,2934.82080078125 1021.800537109375,2960.022216796875 1036.9219970703125,2965.062744140625 1041.962158203125,2970.10400390625 1047.0029296875,2975.143798828125 1052.04296875,2980.18408203125 1057.0838623046875,2985.2255859375 1067.164794921875,2990.265380859375 1067.164794921875,2990.265380859375 1077.2454833984375,3000.345947265625 1097.4072265625,3005.387451171875 1107.48876953125,3010.42724609375 1122.6097412109375,3015.467529296875 1147.8121337890625,3025.548583984375 1157.89306640625,3030.5888671875 1203.25732421875,3035.62939453125 1218.3787841796875,3035.62939453125 1233.5006103515625,3035.62939453125 1263.7432861328125,3035.62939453125 1273.823974609375,3035.62939453125 1283.9053955078125,3035.62939453125 1309.1072998046875,3035.62939453125 1324.228759765625,3025.548583984375 1329.2694091796875,3000.345947265625 1359.5120849609375,2995.3056640625 1359.5120849609375,2995.3056640625 1364.552734375,2985.2255859375 1364.552734375,2980.18408203125 1364.552734375,2975.143798828125 1364.552734375,2965.062744140625 1364.552734375,2960.022216796875 1364.552734375,2954.98193359375 1364.552734375,2954.98193359375 1359.5120849609375,2954.98193359375 1354.4720458984375,2960.022216796875 1349.4317626953125,3005.387451171875 1339.3505859375,3035.62939453125 1339.3505859375,3070.91259765625 1334.3099365234375,3131.398681640625 1334.3099365234375,3146.520751953125 1334.3099365234375,3166.681884765625 1334.3099365234375,3196.925537109375 1344.390625,3196.925537109375 1349.4317626953125,3201.96533203125 1359.5120849609375,3201.96533203125 1374.6339111328125,3201.96533203125 1389.75537109375,3191.884033203125 1409.917236328125,3151.560546875 1440.159912109375,3136.43896484375 1450.2406005859375,3065.872314453125 1475.443359375,3040.670654296875 1485.52392578125,3020.5087890625 1490.5650634765625,2985.2255859375 1495.6053466796875,2965.062744140625 1505.68603515625,2944.90087890625 1505.68603515625,2904.5771484375 1505.68603515625,2874.334228515625 1505.68603515625,2859.212646484375 1505.68603515625,2793.686767578125 1500.6455078125,2768.484130859375 1500.6455078125,2748.322265625 1495.6053466796875,2692.877685546875 1485.52392578125,2672.71533203125 1480.48388671875,2652.553466796875 1475.443359375,2652.553466796875 1470.4027099609375,2652.553466796875 1465.3621826171875,2657.59423828125 1450.2406005859375,2677.755615234375 1445.2005615234375,2743.281982421875 1430.0787353515625,2783.605712890625 1419.9984130859375,2828.97021484375 1419.9984130859375,2934.82080078125 1409.917236328125,2985.2255859375 1409.917236328125,3020.5087890625 1414.957275390625,3060.83203125 1419.9984130859375,3060.83203125 1425.0386962890625,3060.83203125 1430.0787353515625,3055.792236328125 1450.2406005859375,3035.62939453125 1465.3621826171875,3005.387451171875 1470.4027099609375,2909.617431640625 1510.7266845703125,2869.293701171875 1525.848388671875,2818.888916015625 1540.9693603515625,2723.1201171875 1561.1317138671875,2687.8369140625 1566.172119140625,2612.229248046875 1576.252685546875,2592.0673828125 1581.2933349609375,2576.946044921875 1581.2933349609375,2556.7841796875 1591.3739013671875,2551.744384765625 1596.4150390625,2546.703369140625 1596.4150390625,2546.703369140625 1601.4554443359375,2541.66259765625 1601.4554443359375,2536.622314453125 1601.4554443359375,2531.58203125 1601.4554443359375,2526.542236328125 1601.4554443359375,2521.500732421875 1601.4554443359375,2501.3388671875 1601.4554443359375,2491.2587890625 1601.4554443359375,2481.177734375 1601.4554443359375,2440.853515625 1586.3338623046875,2430.772216796875 1576.252685546875,2425.73193359375 1576.252685546875,2395.489013671875 1566.172119140625,2365.245849609375 1566.172119140625,2340.04443359375 1561.1317138671875,2289.638916015625 1540.9693603515625,2279.558837890625 1535.9288330078125,2274.517333984375 1535.9288330078125,2274.517333984375 1530.8887939453125,2269.4775390625 1525.848388671875,2264.436767578125 1520.8072509765625,2259.39599609375 1515.7672119140625,2254.355712890625 1510.7266845703125,2254.355712890625 1505.68603515625,2244.275390625 1495.6053466796875,2244.275390625 1490.5650634765625,2239.234130859375 1480.48388671875,2234.1943359375 1460.322021484375,2234.1943359375 1455.28173828125,2229.153564453125 1445.2005615234375,2224.112548828125 1430.0787353515625,2224.112548828125 1419.9984130859375,2224.112548828125 1414.957275390625,2219.072265625 1404.8765869140625,2219.072265625 1399.8360595703125,2219.072265625 1394.79541015625,2219.072265625 1389.75537109375,2219.072265625 1384.715087890625,2219.072265625 1379.6739501953125,2219.072265625 1374.6339111328125,2219.072265625 1369.59326171875,2219.072265625 1364.552734375,2219.072265625 1359.5120849609375,2219.072265625 1354.4720458984375,2224.112548828125 1344.390625,2229.153564453125 1339.3505859375,2239.234130859375 1329.2694091796875,2259.39599609375 1309.1072998046875,2264.436767578125 1309.1072998046875,2274.517333984375 1299.026611328125,2289.638916015625 1293.986083984375,2294.67919921875 1288.9454345703125,2304.760986328125 1283.9053955078125,2309.80078125 1283.9053955078125,2314.84228515625 1278.8651123046875,2329.962646484375 1273.823974609375,2335.00341796875 1273.823974609375,2350.12548828125 1268.783935546875,2360.20556640625 1258.7027587890625,2365.245849609375 1258.7027587890625,2375.32763671875 1258.7027587890625,2385.408935546875 1258.7027587890625,2400.529296875 1253.662109375,2405.570068359375 1253.662109375,2420.692138671875 1248.6220703125,2440.853515625 1243.5814208984375,2445.894287109375 1243.5814208984375,2461.015380859375 1238.5406494140625,2466.0556640625 1233.5006103515625,2471.095947265625 1233.5006103515625,2486.217529296875 1228.459716796875,2491.2587890625 1223.419677734375,2501.3388671875 1223.419677734375,2506.37939453125 1218.3787841796875,2511.420166015625 1213.3387451171875,2516.4609375 1213.3387451171875,2516.4609375 1208.298095703125,2521.500732421875 1203.25732421875,2526.542236328125 1203.25732421875,2531.58203125 1198.2171630859375,2536.622314453125 1193.1763916015625,2546.703369140625 1188.1363525390625,2551.744384765625 1183.095458984375,2551.744384765625 1178.055419921875,2556.7841796875 1178.055419921875,2556.7841796875 1173.0147705078125,2556.7841796875 1167.973876953125,2561.825439453125 1162.933837890625,2561.825439453125 1157.89306640625,2561.825439453125 1152.85302734375,2561.825439453125 1147.8121337890625,2561.825439453125 1142.7720947265625,2561.825439453125 1137.7314453125,2566.865234375 1137.7314453125,2566.865234375 1132.6905517578125,2566.865234375 1127.6505126953125,2571.905517578125 1122.6097412109375,2571.905517578125 1117.569580078125,2576.946044921875 1112.52880859375,2581.98681640625 1107.48876953125,2581.98681640625 1102.4481201171875,2587.027587890625 1097.4072265625,2587.027587890625 1092.3671875,2587.027587890625 1087.3262939453125,2587.027587890625 1082.2862548828125,2592.0673828125 1077.2454833984375,2592.0673828125 1072.205322265625,2592.0673828125 1067.164794921875,2597.10888671875 1067.164794921875,2597.10888671875 1062.1239013671875,2597.10888671875 1057.0838623046875,2597.10888671875 1052.04296875,2597.10888671875 1047.0029296875,2597.10888671875 1041.962158203125,2597.10888671875 1036.9219970703125,2597.10888671875 1031.8814697265625,2597.10888671875 1026.840576171875,2597.10888671875 1021.800537109375,2576.946044921875 1052.04296875))";
            var outputPoly =
                "POLYGON ((2576.946044921875 1052.04296875, 2597.10888671875 1021.800537109375, 2597.10888671875 1067.164794921875, 2592.0673828125 1067.164794921875, 2592.0673828125 1077.2454833984375, 2587.027587890625 1082.2862548828125, 2587.027587890625 1097.4072265625, 2581.98681640625 1102.4481201171875, 2581.98681640625 1107.48876953125, 2571.905517578125 1117.569580078125, 2571.905517578125 1122.6097412109375, 2566.865234375 1127.6505126953125, 2566.865234375 1137.7314453125, 2561.825439453125 1137.7314453125, 2561.825439453125 1162.933837890625, 2556.7841796875 1167.973876953125, 2556.7841796875 1178.055419921875, 2551.744384765625 1178.055419921875, 2551.744384765625 1183.095458984375, 2546.703369140625 1188.1363525390625, 2536.622314453125 1193.1763916015625, 2526.542236328125 1203.25732421875, 2521.500732421875 1203.25732421875, 2516.4609375 1208.298095703125, 2516.4609375 1213.3387451171875, 2511.420166015625 1213.3387451171875, 2501.3388671875 1223.419677734375, 2491.2587890625 1223.419677734375, 2486.217529296875 1228.459716796875, 2471.095947265625 1233.5006103515625, 2466.0556640625 1233.5006103515625, 2461.015380859375 1238.5406494140625, 2445.894287109375 1243.5814208984375, 2440.853515625 1243.5814208984375, 2420.692138671875 1248.6220703125, 2405.570068359375 1253.662109375, 2400.529296875 1253.662109375, 2385.408935546875 1258.7027587890625, 2360.20556640625 1258.7027587890625, 2350.12548828125 1268.783935546875, 2335.00341796875 1273.823974609375, 2329.962646484375 1273.823974609375, 2314.84228515625 1278.8651123046875, 2309.80078125 1283.9053955078125, 2304.760986328125 1283.9053955078125, 2294.67919921875 1288.9454345703125, 2289.638916015625 1293.986083984375, 2274.517333984375 1299.026611328125, 2264.436767578125 1309.1072998046875, 2259.39599609375 1309.1072998046875, 2224.112548828125 1344.390625, 2219.072265625 1354.4720458984375, 2219.072265625 1404.8765869140625, 2224.112548828125 1414.957275390625, 2224.112548828125 1430.0787353515625, 2229.153564453125 1445.2005615234375, 2234.1943359375 1455.28173828125, 2234.1943359375 1460.322021484375, 2239.234130859375 1480.48388671875, 2244.275390625 1490.5650634765625, 2244.275390625 1495.6053466796875, 2254.355712890625 1505.68603515625, 2254.355712890625 1510.7266845703125, 2274.517333984375 1530.8887939453125, 2274.517333984375 1535.9288330078125, 2279.558837890625 1535.9288330078125, 2289.638916015625 1540.9693603515625, 2340.04443359375 1561.1317138671875, 2365.245849609375 1566.172119140625, 2395.489013671875 1566.172119140625, 2425.73193359375 1576.252685546875, 2430.772216796875 1576.252685546875, 2440.853515625 1586.3338623046875, 2481.177734375 1601.4554443359375, 2546.703369140625 1601.4554443359375, 2546.703369140625 1596.4150390625, 2551.744384765625 1596.4150390625, 2556.7841796875 1591.3739013671875, 2576.946044921875 1581.2933349609375, 2592.0673828125 1581.2933349609375, 2612.229248046875 1576.252685546875, 2687.8369140625 1566.172119140625, 2723.1201171875 1561.1317138671875, 2818.888916015625 1540.9693603515625, 2869.293701171875 1525.848388671875, 2909.617431640625 1510.7266845703125, 2921.5890464804652 1505.6860351562505, 2921.5890464804652 1505.68603515625, 2859.212646484375 1505.68603515625, 2793.686767578125 1500.6455078125, 2768.484130859375 1500.6455078125, 2748.322265625 1495.6053466796875, 2692.877685546875 1485.52392578125, 2652.553466796875 1475.443359375, 2652.553466796875 1465.3621826171875, 2657.59423828125 1450.2406005859375, 2677.755615234375 1445.2005615234375, 2743.281982421875 1430.0787353515625, 2783.605712890625 1419.9984130859375, 2828.97021484375 1419.9984130859375, 2934.82080078125 1409.917236328125, 2985.2255859375 1409.917236328125, 3020.5087890625 1414.957275390625, 3060.83203125 1419.9984130859375, 3060.83203125 1430.0787353515625, 3055.792236328125 1450.2406005859375, 3035.62939453125 1465.3621826171875, 3005.387451171875 1470.4027099609375, 2921.589046480467 1505.6860351562495, 2921.589046480467 1505.68603515625, 2965.062744140625 1505.68603515625, 2985.2255859375 1495.6053466796875, 3020.5087890625 1490.5650634765625, 3040.670654296875 1485.52392578125, 3065.872314453125 1475.443359375, 3136.43896484375 1450.2406005859375, 3151.560546875 1440.159912109375, 3191.884033203125 1409.917236328125, 3201.96533203125 1389.75537109375, 3201.96533203125 1359.5120849609375, 3196.925537109375 1349.4317626953125, 3196.925537109375 1344.390625, 3166.681884765625 1334.3099365234375, 3070.91259765625 1334.3099365234375, 3035.62939453125 1339.3505859375, 3017.1474677153528 1339.3505859375, 3017.147467715351 1339.3505859375002, 3000.345947265625 1359.5120849609375, 2995.3056640625 1359.5120849609375, 2995.3056640625 1364.552734375, 2954.98193359375 1364.552734375, 2954.98193359375 1354.4720458984375, 2960.022216796875 1349.4317626953125, 3005.387451171875 1339.3505859375, 3017.147467715351 1339.3505859375, 3017.1474677153528 1339.3505859374993, 3025.548583984375 1329.2694091796875, 3035.62939453125 1324.228759765625, 3035.62939453125 1218.3787841796875, 3030.5888671875 1203.25732421875, 3025.548583984375 1157.89306640625, 3015.467529296875 1147.8121337890625, 3010.42724609375 1122.6097412109375, 3005.387451171875 1107.48876953125, 2990.265380859375 1077.2454833984375, 2990.265380859375 1067.164794921875, 2985.2255859375 1067.164794921875, 2980.18408203125 1057.0838623046875, 2960.022216796875 1036.9219970703125, 2934.82080078125 1021.800537109375, 2924.739013671875 1006.6787719726562, 2909.617431640625 1001.6387329101562, 2849.132080078125 971.39544677734375, 2828.97021484375 966.3553466796875, 2783.605712890625 951.23388671875, 2773.525634765625 946.1929931640625, 2753.362548828125 931.072021484375, 2713.0390625 931.072021484375, 2707.99853515625 936.11212158203125, 2702.958740234375 936.11212158203125, 2692.877685546875 946.1929931640625, 2677.755615234375 946.1929931640625, 2662.634033203125 956.27392578125, 2642.472412109375 976.436279296875, 2637.431884765625 976.436279296875, 2622.31103515625 991.5572509765625, 2622.31103515625 996.59814453125, 2612.229248046875 1006.6787719726562, 2597.10888671875 1016.7597045898438, 2597.1088867187491 1021.8005371093752, 2576.946044921875 1041.962158203125, 2576.946044921875 1052.04296875))";
            _testBadPoly(inputPoly, outputPoly);
        }

        [Fact]
        public void FixesWrongOrientationPolys()
        {
            const string inputPoly = "POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))";
            const string outputPoly = "POLYGON ((0 0, 0 10, 10 10, 10 0, 0 0))";
            _testBadPoly(inputPoly, outputPoly);
        }

        [Fact]
        public void MergesVeryClosePolys()
        {
            const string inputPoly = "POLYGON ((0 0, 0 10, 10 10, 10 0, 0 0),(11 11, 11 20, 20 20, 20 11, 11 11))";
            const string outputPoly =
                "POLYGON ((10 10, 10 0, 0 0, 0 10, 9.9999999999999964 10, 11 11.000000000000004, 11 20, 20 20, 20 11, 11 11, 10 10))";
            _testBadPoly(inputPoly, outputPoly);
        }

        [Fact]
        public void RemovesUnneededPoints()
        {
            var inputPoly = "POLYGON ((0 0,5 0,10 0,10 10,0 10,0 0))";
            var outputPoly = "POLYGON ((0 0,0 10,10 10,10 0,0 0))";
            _testBadPoly(inputPoly, outputPoly);
        }

        [Fact]
        public void RemovesUnneededPointsFromFixedPoly()
        {
            var inputPoly = "POLYGON ((0 0,5 0,10 0,0 10,5 10,10 10,0 0))";
            var outputPoly =
                "POLYGON ((0 0, 4.9999999999999982 4.9999999999999982, 4.9999999999999982 5.0000000000000018, 0 10, 10 10, 5.0000000000000018 5.0000000000000018, 5.0000000000000018 4.9999999999999982, 10 0, 0 0))";
            _testBadPoly(inputPoly, outputPoly);
        }

        [Fact]
        public void ValidDecimalAttributeForPrecisionAndScale()
        {
            var errorThrown = false;
            try
            {
                // This is invalid because the scale cannot be larger than the precision
                var attr = new ValidDecimalAttribute(3, 4);
            }
            catch (ArgumentException e)
            {
                errorThrown = true;
                Assert.Contains(e.Message, "The scale must be less than or equal to the precision");
            }

            Assert.True(errorThrown);

            try
            {
                // Test support for only fractional numbers
                var attr = new ValidDecimalAttribute(3, 3);
                errorThrown = false;
                Assert.True(attr.IsValid((decimal)0.001)); // Min
                Assert.True(attr.IsValid((decimal)0.999)); // Max
                Assert.False(attr.IsValid((decimal)0.0001));
                Assert.False(attr.IsValid((decimal)1.1));
                Assert.False(attr.IsValid((decimal)5.76));
            }
            catch
            {
                errorThrown = true; // We should not expect any error
            }

            Assert.False(errorThrown);
        }

        [Fact]
        public void ValidDecimalAttributeRejectsInvalidDecimal()
        {
            // Set decimal precision to 4 places to the left of decimal point and 2 places to its right
            var attr = new ValidDecimalAttribute(6, 2);

            // Accepts good values
            Assert.True(attr.IsValid((decimal)0.01)); // Min
            Assert.True(attr.IsValid((decimal)1));
            Assert.True(attr.IsValid((decimal)12.2));
            Assert.True(attr.IsValid((decimal)1234.12));
            Assert.True(attr.IsValid((decimal)9999.99)); // Max

            // Rejects bad values
            Assert.False(attr.IsValid(23U)); // Wrong input type (uint)
            Assert.False(attr.IsValid((decimal)12345.12)); // Left of decimal too great
            Assert.False(attr.IsValid((decimal)1234.123)); // Right of decimal too great
        }
    }
}